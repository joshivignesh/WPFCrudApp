<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                     xmlns:fa5="http://schemas.fontawesome.com/icons/"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <Style x:Key="btnButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="TextBlock.FontSize" Value="15"/>
        <Setter Property="BorderThickness" Value="0 0 1 1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="10,5"/>
        <Setter Property="Height" Value="30" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid FocusVisualStyle="{x:Null}">
                        <Border x:Name="border" Background="{TemplateBinding Background}" CornerRadius="15" BorderThickness="1" BorderBrush="{TemplateBinding BorderBrush}"/>
                        <Grid FocusVisualStyle="{x:Null}">
                            <TextBlock 
                                    Text="Lock"
                                    TextElement.FontFamily="{DynamicResource FontAwesome}"
                                    FocusVisualStyle="{x:Null}"
                                    Padding="0" Height="20" Width="20" Margin="0 5 5 0"
                                    Foreground="{TemplateBinding Foreground}" 
                                    VerticalAlignment="Top" HorizontalAlignment="Right" TextAlignment="Center" 
                                    FontSize="1">

                                <TextBlock.Style>
                                    <Style TargetType="TextBlock">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                        <Style.Triggers>
                                            <DataTrigger  Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsSpecialAuthentication, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay , IsAsync=True}"  Value="true">
                                                <Setter Property="Visibility" Value="Visible"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                        </Grid>
                        <Grid x:Name="mainGrid"
                                  FocusVisualStyle="{x:Null}"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Margin="{TemplateBinding Padding}" >

                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="{Binding ElementName=txbIcon, Path=ActualWidth,IsAsync=True}"/>
                                <ColumnDefinition/>
                            </Grid.ColumnDefinitions>

                            <TextBlock x:Name="txbText" Visibility="Collapsed" Grid.Column="0" FocusVisualStyle="{x:Null}">
                                <TextBlock.Text>
                                    <MultiBinding StringFormat="{}{0}{1}" UpdateSourceTrigger="PropertyChanged" Mode="TwoWay">
                                        <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="IconPrefix" UpdateSourceTrigger="PropertyChanged" Mode="TwoWay" IsAsync="True"/>
                                        <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="IconText" UpdateSourceTrigger="PropertyChanged" Mode="TwoWay" IsAsync="True"/>
                                    </MultiBinding>
                                </TextBlock.Text>
                            </TextBlock>

                            <Label 
                                    fa5:Awesome.Content="{Binding ElementName=txbText ,Path=Text, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay, IsAsync=True }"
                                    TextElement.FontFamily="{DynamicResource FontAwesome}"
                                    FocusVisualStyle="{x:Null}"
                                    x:Name="txbIcon" Padding="0" 
                                           Foreground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IconColor, IsAsync=True}" 
                                           VerticalAlignment="Center" HorizontalAlignment="Stretch" HorizontalContentAlignment="Center"  FontSize="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IconSize, IsAsync=True}">

                                <Label.Style>
                                    <Style TargetType="Label">
                                        <Setter Property="Grid.Column" Value="0"/>
                                        <Setter Property="Grid.ColumnSpan" Value="1"/>
                                        <Setter Property="HorizontalAlignment" Value="Left"/>
                                        <Style.Triggers>
                                            <DataTrigger  Binding="{Binding ElementName=txbCP, Path=Text, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay , IsAsync=True}"  Value="">
                                                <Setter Property="HorizontalAlignment" Value="Center"/>
                                                <Setter Property="Grid.Column" Value="0"/>
                                                <Setter Property="Grid.ColumnSpan" Value="2"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Label.Style>
                            </Label>

                            <TextBlock x:Name="txbCP" Padding="0,0" TextWrapping="Wrap" Foreground="{TemplateBinding Foreground}" FocusVisualStyle="{x:Null}" FontSize="{TemplateBinding FontSize}" HorizontalAlignment="Center" VerticalAlignment="Center" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay , IsAsync=True}" >
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock">
                                        <Setter Property="Grid.Column" Value="1"/>
                                        <Setter Property="Grid.ColumnSpan" Value="1"/>
                                        <Setter Property="TextAlignment" Value="Left"/>
                                        <Setter Property="Margin" Value="8,0,0,0"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IconText, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay , IsAsync=True}" Value="">
                                                <Setter Property="Grid.Column" Value="0"/>
                                                <Setter Property="Grid.ColumnSpan" Value="2"/>
                                                <Setter Property="TextAlignment" Value="Left"/>
                                                <Setter Property="Margin" Value="0"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>

                        <EventTrigger RoutedEvent="PreviewTouchUp">
                            <EventTrigger.Actions>
                                <RemoveStoryboard BeginStoryboardName="q"/>
                            </EventTrigger.Actions>
                        </EventTrigger>

                        <EventTrigger RoutedEvent="PreviewTouchDown">
                            <EventTrigger.Actions>
                                <BeginStoryboard Name="q">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.4" Duration="0:0:0"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger.Actions>
                        </EventTrigger>

                        <EventTrigger RoutedEvent="PreviewMouseUp">
                            <EventTrigger.Actions>
                                <RemoveStoryboard BeginStoryboardName="w"/>
                            </EventTrigger.Actions>
                        </EventTrigger>

                        <EventTrigger RoutedEvent="PreviewMouseDown">
                            <EventTrigger.Actions>
                                <BeginStoryboard Name="w">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.4"  Duration="0:0:0"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger.Actions>
                        </EventTrigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.23"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>


    </Style>
</ResourceDictionary>